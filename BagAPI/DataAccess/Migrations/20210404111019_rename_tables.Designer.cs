// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DataAccess.Migrations
{
    [DbContext(typeof(BagDbContext))]
    [Migration("20210404111019_rename_tables")]
    partial class rename_tables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("DataAccess.Model.Bag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Descriprion")
                        .HasColumnType("text");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("bytea");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Bag");
                });

            modelBuilder.Entity("DataAccess.Model.BagRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("BagId")
                        .HasColumnType("integer");

                    b.Property<int>("FlightId")
                        .HasColumnType("integer");

                    b.Property<int>("RequestStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("SenderUserId")
                        .HasColumnType("integer");

                    b.Property<int>("TransfererUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BagId")
                        .IsUnique();

                    b.HasIndex("FlightId")
                        .IsUnique();

                    b.HasIndex("RequestStatusId");

                    b.HasIndex("RequestTypeId");

                    b.HasIndex("SenderUserId");

                    b.HasIndex("TransfererUserId");

                    b.ToTable("BagRequest");
                });

            modelBuilder.Entity("DataAccess.Model.Country", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("DataAccess.Model.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DestinationId")
                        .HasColumnType("integer");

                    b.Property<string>("DestinationStationCode")
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<int>("SourceId")
                        .HasColumnType("integer");

                    b.Property<string>("SourceStationCode")
                        .HasColumnType("text");

                    b.Property<byte[]>("TicketPhoto")
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("DestinationStationCode");

                    b.HasIndex("SourceStationCode");

                    b.ToTable("Flight");
                });

            modelBuilder.Entity("DataAccess.Model.Region", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CityCode")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.HasIndex("CityCode");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("DataAccess.Model.RequestStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BagRequestStatus");
                });

            modelBuilder.Entity("DataAccess.Model.RequestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BagRequestType");
                });

            modelBuilder.Entity("DataAccess.Model.Settlement", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("RegionCode")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.HasIndex("RegionCode");

                    b.ToTable("Settlement");
                });

            modelBuilder.Entity("DataAccess.Model.Station", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("SettlementCode")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.HasIndex("SettlementCode");

                    b.ToTable("Station");
                });

            modelBuilder.Entity("DataAccess.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Skype")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DataAccess.Model.BagRequest", b =>
                {
                    b.HasOne("DataAccess.Model.Bag", "Bag")
                        .WithOne("BagRequest")
                        .HasForeignKey("DataAccess.Model.BagRequest", "BagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Model.Flight", "Flight")
                        .WithOne("Request")
                        .HasForeignKey("DataAccess.Model.BagRequest", "FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Model.RequestStatus", "RequestStatus")
                        .WithMany("Requests")
                        .HasForeignKey("RequestStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Model.RequestType", "RequestType")
                        .WithMany()
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Model.User", "SenderUser")
                        .WithMany("SenderRequests")
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Model.User", "TransfererUser")
                        .WithMany("SourceRequests")
                        .HasForeignKey("TransfererUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bag");

                    b.Navigation("Flight");

                    b.Navigation("RequestStatus");

                    b.Navigation("RequestType");

                    b.Navigation("SenderUser");

                    b.Navigation("TransfererUser");
                });

            modelBuilder.Entity("DataAccess.Model.Flight", b =>
                {
                    b.HasOne("DataAccess.Model.Station", "DestinationStation")
                        .WithMany("DestinationFlights")
                        .HasForeignKey("DestinationStationCode");

                    b.HasOne("DataAccess.Model.Station", "SourceStation")
                        .WithMany("SourceFlights")
                        .HasForeignKey("SourceStationCode");

                    b.Navigation("DestinationStation");

                    b.Navigation("SourceStation");
                });

            modelBuilder.Entity("DataAccess.Model.Region", b =>
                {
                    b.HasOne("DataAccess.Model.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CityCode");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DataAccess.Model.Settlement", b =>
                {
                    b.HasOne("DataAccess.Model.Region", "Region")
                        .WithMany("Settlements")
                        .HasForeignKey("RegionCode");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("DataAccess.Model.Station", b =>
                {
                    b.HasOne("DataAccess.Model.Settlement", "Settlement")
                        .WithMany("Stations")
                        .HasForeignKey("SettlementCode");

                    b.Navigation("Settlement");
                });

            modelBuilder.Entity("DataAccess.Model.Bag", b =>
                {
                    b.Navigation("BagRequest");
                });

            modelBuilder.Entity("DataAccess.Model.Country", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("DataAccess.Model.Flight", b =>
                {
                    b.Navigation("Request");
                });

            modelBuilder.Entity("DataAccess.Model.Region", b =>
                {
                    b.Navigation("Settlements");
                });

            modelBuilder.Entity("DataAccess.Model.RequestStatus", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("DataAccess.Model.Settlement", b =>
                {
                    b.Navigation("Stations");
                });

            modelBuilder.Entity("DataAccess.Model.Station", b =>
                {
                    b.Navigation("DestinationFlights");

                    b.Navigation("SourceFlights");
                });

            modelBuilder.Entity("DataAccess.Model.User", b =>
                {
                    b.Navigation("SenderRequests");

                    b.Navigation("SourceRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
